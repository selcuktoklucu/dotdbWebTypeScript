{"version":3,"sources":["logo.svg","apiConfig.tsx","auth/components/SignUp.tsx","auth/api.tsx","auth/components/SignIn.tsx","shared/Header.tsx","shared/AuthenticatedRoute.tsx","shared/autoDismissAlert.tsx","neworder/apiNewOrder.tsx","neworder/components/NewOrder.tsx","App.tsx","serviceWorker.ts","redux/system/types.tsx","redux/system/reducers.tsx","index.tsx"],"names":["module","exports","apiUrl","apiUrls","window","location","hostname","SignUp","props","useState","email","setEmail","password","setPassword","passwordConfirmation","setPasswordConfirmation","className","onSubmit","event","preventDefault","credentials","fetch","method","headers","Accept","body","JSON","stringify","password_confirmation","signUp","then","console","log","res","setAlerts","alerts","title","variant","catch","error","htmlFor","required","name","value","type","placeholder","onChange","e","target","Button","SignIn","history","useHistory","useDispatch","axios","url","data","signIn","setUser","user","push","authenticatedOptions","Fragment","to","unauthenticatedOptions","alwaysOptions","Header","src","logo","alt","AuthenticatedRoute","Component","component","render","rest","AutoDismissAlert","timer","handleClose","setState","show","state","this","setInterval","clearInterval","alert","Alert","dismissible","onClose","Heading","React","searchPhone","phone","a","async","token","Authorization","response","status","json","responseJson","getSuggestions","address","postAddress","customer","phoneNumber","currentAddress","NewOrder","setPhoneNumber","setAddress","setName","orderTotal","setOrderTotal","date","setDate","suggestions","setSuggestions","useEffect","length","fetchMyApi","responseArr","fetchForSuggestedAddresses","maxLength","pattern","map","suggestion","key","onClick","saveTheAddress","description","App","index","exact","path","Boolean","match","UPDATE_SESSION","initialState","loggedIn","session","userName","store","createStore","action","payload","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b7d033d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export let apiUrl: string\n\nconst apiUrls = {\n  development: 'http://localhost:4741',\n  production: 'https://dotdot-api.herokuapp.com'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\nexport default apiUrl\n","import React, { useState } from 'react'\n// import { withRouter } from 'react-router-dom'\n\nimport { signUp } from '../api'\nimport { Credentials } from '../../shared/types'\nimport Button from 'react-bootstrap/Button'\n\ntype Props = {\n  setAlerts: any\n  alerts: Array<any>\n  setUser: any\n  history?: any\n}\n\nconst SignUp: React.FC<Props> = props => {\n  const [email, setEmail] = useState()\n  const [password, setPassword] = useState()\n  const [passwordConfirmation, setPasswordConfirmation] = useState()\n  // const [history, setHistory] = useState()\n  // handleChange = event =>\n  //   this.setState({\n  //     [event.target.name]: event.target.value\n  //   })\n\n  const onSignUp = (event: { preventDefault: () => void }) => {\n    event.preventDefault()\n    //console.log('history', history)\n    const credentials: Credentials = { email, password, passwordConfirmation }\n    signUp(credentials)\n      .then(() => console.log(email))\n      .then((res: any) => console.log(email, res))\n      .then(() =>\n        props.setAlerts([\n          ...props.alerts,\n          { title: 'Sign up Successful', variant: 'success' }\n        ])\n      )\n      .then(() => console.log('pro'))\n      .catch((error: any) => {\n        console.error('ERR', error)\n        //let variant = undefined\n\n        props.setAlerts([\n          ...props.alerts,\n          { title: 'Hello', variant: 'success' }\n        ])\n      })\n  }\n\n  // render() {\n  //   const { email, password, passwordConfirmation } = this.state\n\n  return (\n    <div className=\"col-md-6 m-auto py-3\">\n      <form className=\"auth-form\" onSubmit={onSignUp}>\n        <h3>Sign Up</h3>\n\n        <label htmlFor=\"email\">Email</label>\n        <input\n          required\n          name=\"email\"\n          value={email}\n          type=\"email\"\n          placeholder=\"Email\"\n          onChange={e => setEmail(e.target.value)}\n        />\n        <label htmlFor=\"password\">Password</label>\n        <input\n          required\n          name=\"password\"\n          value={password}\n          type=\"password\"\n          placeholder=\"Password\"\n          onChange={e => setPassword(e.target.value)}\n        />\n        <label htmlFor=\"passwordConfirmation\">Confirm Password</label>\n        <input\n          required\n          name=\"passwordConfirmation\"\n          value={passwordConfirmation}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n          onChange={e => setPasswordConfirmation(e.target.value)}\n        />\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </form>\n    </div>\n  )\n}\nexport default SignUp\n","import { apiUrl } from '../apiConfig'\nimport axios from 'axios'\nimport { Credentials } from '../shared/types'\n\nexport const signUp = (credentials: Credentials) =>\n  fetch(`${apiUrl}/sign-up/`, {\n    method: 'Post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Accept-Language': 'ru,en;q=0.9'\n    },\n    body: JSON.stringify({\n      credentials: {\n        email: `${credentials.email}`,\n        password: `${credentials.password}`,\n        password_confirmation: `${credentials.passwordConfirmation}`\n      }\n    })\n  })\n\nexport const signIn = (credentials: Credentials) =>\n  axios({\n    url: apiUrl + '/sign-in',\n    method: 'POST',\n    data: {\n      credentials: {\n        email: credentials.email,\n        password: credentials.password\n      }\n    }\n  })\n// fetch(`${apiUrl}/sign-in/`, {\n//   method: 'Post',\n//   headers: {\n//     Accept: 'application/json',\n//     'Content-Type': 'application/json',\n//     'Accept-Language': 'ru,en;q=0.9'\n//   },\n//   body: JSON.stringify({\n//     credentials: {\n//       email: `${credentials.email}`,\n//       password: `${credentials.password}`\n//     }\n//   })\n// })\n//   return axios({\n//     method: 'POST',\n//     url: apiUrl + '/sign-up',\n//     headers: {\n//       Accept: 'application/json',\n//       'Content-Type': 'application/json',\n//       'Accept-Language': 'ru,en;q=0.9'\n//     },\n//     data: {\n//       credentials: {\n//         email: credentials.email,\n//         password: credentials.password,\n//         password_confirmation: credentials.passwordConfirmation\n//       }\n//     }\n//   })\n// }\n\n// export const signIn = credentials => {\n//   console.log('logininin', apiUrl + '/sign-in')\n//   return axios({\n//     url: apiUrl + '/sign-in',\n//     method: 'POST',\n//     data: {\n//       credentials: {\n//         email: credentials.email,\n//         password: credentials.password\n//       }\n//     }\n//   })\n// }\n\n// export const signOut = user => {\n//   return axios({\n//     url: apiUrl + '/sign-out',\n//     method: 'DELETE',\n//     headers: {\n//       Authorization: `Token token=${user.token}`\n//     }\n//   })\n// }\n\n// export const changePassword = (passwords, user) => {\n//   return axios({\n//     url: apiUrl + '/change-password',\n//     method: 'PATCH',\n//     headers: {\n//       Authorization: `Token token=${user.token}`\n//     },\n//     data: {\n//       passwords: {\n//         old: passwords.oldPassword,\n//         new: passwords.newPassword\n//       }\n//     }\n//   })\n// }\n","import React, { useState } from 'react'\n// import { History } from 'history'\nimport { useHistory } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\n\nimport { signIn } from '../api'\nimport { Credentials } from '../../shared/types'\nimport Button from 'react-bootstrap/Button'\nimport { updateSession } from '../../redux/system/actions'\n\ntype Props = {\n  setAlerts: any\n  alerts: Array<any>\n  setUser: any\n}\n\nconst SignIn: React.FC<Props> = props => {\n  const [email, setEmail] = useState('st@st.com')\n  const [password, setPassword] = useState('stst')\n  //const [passwordConfirmation, setPasswordConfirmation] = useState()\n  let history = useHistory()\n  const dispatch = useDispatch()\n\n  const onSignIn = (event: { preventDefault: () => void }) => {\n    event.preventDefault()\n    const credentials: Credentials = { email, password }\n    signIn(credentials)\n      .then((res: any) => {\n        props.setUser(res.data.user)\n        // dispatch(updateSession(res.data.user.token))\n      })\n      .then(() =>\n        props.setAlerts([\n          ...props.alerts,\n          { title: 'Welcome', variant: 'success' }\n        ])\n      )\n      .then(() => {\n        history.push('/new-order')\n      })\n      .catch((error: any) => {\n        console.error(error)\n        props.setAlerts([\n          ...props.alerts,\n          { title: 'Welcome', variant: 'failed' }\n        ])\n      })\n  }\n\n  return (\n    <div className=\"col-md-6 m-auto py-3\">\n      <form className=\"auth-form\" onSubmit={onSignIn}>\n        <h3>Sign In</h3>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          required\n          name=\"email\"\n          value={email}\n          type=\"email\"\n          placeholder=\"Email\"\n          onChange={e => setEmail(e.target.value)}\n        />\n        <label htmlFor=\"password\">Password</label>\n        <input\n          required\n          name=\"password\"\n          value={password}\n          type=\"password\"\n          placeholder=\"Password\"\n          onChange={e => setPassword(e.target.value)}\n        />\n        <Button variant=\"primary\" type=\"submit\">\n          Sign In\n        </Button>\n      </form>\n    </div>\n  )\n}\nexport default SignIn\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './Header.scss'\nimport { User } from './types'\nimport logo from '../logo.svg'\n\nconst authenticatedOptions = (\n  <React.Fragment>\n    <Link to=\"/new-order\">New Order</Link>\n    <Link to=\"/change-password\">Change Password</Link>\n    <Link to=\"/sign-out\">Sign Out</Link>\n  </React.Fragment>\n)\n\nconst unauthenticatedOptions = (\n  <React.Fragment>\n    <Link to=\"/sign-up\">Sign Up</Link>\n    <Link to=\"/sign-in\">Sign In</Link>\n  </React.Fragment>\n)\n\nconst alwaysOptions = (\n  <React.Fragment>\n    <Link to=\"/\">Home</Link>\n  </React.Fragment>\n)\n\ntype Props = {\n  user: User\n}\n\nconst Header: React.FC<Props> = props => {\n  const { user } = props\n  //console.log(user)\n  return (\n    <header className=\"main-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <h1>The Dot DB</h1>\n      <nav>\n        {user && <span>Welcome, {user.email}</span>}\n        {user ? authenticatedOptions : unauthenticatedOptions}\n        {alwaysOptions}\n      </nav>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n\n// props will include a `user` object or empty object\n// props will include a `component` as `Component` or a `render`\n// all other props that may be passed in are `..rest`\ntype Props = {\n  user: any\n  component?: any\n  exact?: boolean\n  render: any\n  path: string\n}\nconst AuthenticatedRoute: React.FC<Props> = ({\n  user,\n  component: Component,\n  render,\n  ...rest\n}) => {\n  // if props include a `user` object and a `render` then create route with `render`\n  if (user && render) {\n    return <Route {...rest} render={render} />\n    // if props include a `user` object but no `render` then create route with `Component`\n    // if props do not include a `user` object then redirect to home\n  } else {\n    return (\n      <Route\n        {...rest}\n        render={props =>\n          user ? <Component {...props} /> : <Redirect to=\"/\" />\n        }\n      />\n    )\n  }\n}\n\nexport default AuthenticatedRoute\n","import React from 'react'\nimport Alert, { AlertProps } from 'react-bootstrap/Alert'\n\ntype Props = {\n  dismissible: boolean\n  alert: AlertProps\n  onClose: () => void\n}\n\ninterface ComponentState {\n  show: boolean\n}\n\nclass AutoDismissAlert extends React.Component<Props, ComponentState> {\n  timer!: NodeJS.Timeout\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      show: true\n    }\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState({ show: false })\n    }, 4000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n  }\n\n  handleClose = () => this.setState({ show: false })\n\n  render() {\n    const { alert } = this.props\n    return (\n      <Alert\n        dismissible\n        show={this.state.show}\n        variant={alert.variant}\n        onClose={this.handleClose}\n      >\n        <div className=\"container\">\n          <Alert.Heading>{alert.title}</Alert.Heading>\n        </div>\n      </Alert>\n    )\n  }\n}\n\nexport default AutoDismissAlert\n","import { apiUrl } from '../apiConfig'\nimport axios from 'axios'\nimport { Credentials, User } from '../shared/types'\n\nexport const createOrder = (credentials: Credentials) =>\n  fetch(`${apiUrl}/new-order/`, {\n    method: 'Post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Accept-Language': 'ru,en;q=0.9'\n    },\n    body: JSON.stringify({\n      credentials: {\n        email: `${credentials.email}`,\n        password: `${credentials.password}`,\n        password_confirmation: `${credentials.passwordConfirmation}`\n      }\n    })\n  })\n\nexport const searchPhone = async (phone: number, user: User) => {\n  // const token = SecureStore.getItemAsync('secure_token')\n  // console.log('searchByPhone network', user.token)\n\n  // const token = await SecureStore.getItemAsync('secure_token')\n  // console.log('apiurl', apiUrl)\n  const token = user.token\n  const response = await fetch(`${apiUrl}/customers/${phone}`, {\n    method: 'GET',\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  })\n  if (response.status === 200) {\n    const responseJson = await response.json()\n    return responseJson\n  } else {\n    return false\n  }\n}\n\nexport const getSuggestions = async (address: string, user: User) => {\n  const token = user.token\n  const response = await fetch(`${apiUrl}/google-maps-masker/${address}`, {\n    method: 'GET',\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  })\n  if (response.status === 200) {\n    const responseJson = await response.json()\n    console.log('responseJson', responseJson)\n    return responseJson\n  } else {\n    return false\n  }\n}\n\ntype Data = {\n  phoneNumber: number\n  address: string\n  name: string\n}\nexport const saveTheAddress = async (\n  phoneNumber: number,\n  address: string,\n  name: string,\n  user: User\n) => {\n  const data = {\n    phoneNumber,\n    address,\n    name\n  }\n  // openMap({ end: this.state.currentAddress, navigate_mode: \"navigate\" });\n  postAddress(data, user)\n}\n\nexport const postAddress = async (data: Data, user: User) => {\n  const token = user.token\n\n  const response = await fetch(`${apiUrl}/customers/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      customer: {\n        name: data.name,\n        phone: data.phoneNumber,\n        currentAddress: data.address\n      }\n    })\n  })\n\n  const responseJson = await response.json()\n  console.log(\n    'reponse postAddress',\n    responseJson,\n    'responseCode',\n    response.status\n  )\n  return response.status === 1 ? true : false\n}\n","import React, { useState, useEffect } from 'react'\n// import { History } from 'history'\nimport { useHistory } from 'react-router-dom'\n\n//import { signIn } from '../api'\nimport { Credentials, User } from '../../shared/types'\nimport Button from 'react-bootstrap/Button'\nimport { searchPhone, getSuggestions, saveTheAddress } from '../apiNewOrder'\nimport { AlertProps } from 'react-bootstrap/Alert'\n\ntype Props = {\n  user: User\n  alerts: Array<any>\n  setAlerts: any\n}\ntype Suggestion = {\n  description: string\n  id: string\n}\n\nconst NewOrder: React.FC<Props> = props => {\n  const [phoneNumber, setPhoneNumber] = useState()\n  const [address, setAddress] = useState()\n\n  const [name, setName] = useState()\n  const [orderTotal, setOrderTotal] = useState()\n  const [date, setDate] = useState()\n  const [suggestions, setSuggestions] = useState()\n\n  const cleanFields = () => {\n    setPhoneNumber('')\n    setAddress('')\n    setName('')\n    setOrderTotal('')\n    setDate('')\n    setSuggestions('')\n  }\n\n  useEffect(() => {\n    async function fetchMyApi() {\n      if (phoneNumber && phoneNumber.length === 10) {\n        const response = await searchPhone(phoneNumber, props.user)\n        if (response) {\n          setAddress(response.customer.currentAddress)\n        } else {\n          props.setAlerts([\n            ...props.alerts,\n            {\n              title: 'Address not found! Please create one',\n              variant: 'success'\n            }\n          ])\n        }\n      }\n    }\n    fetchMyApi()\n  }, [phoneNumber])\n\n  useEffect(() => {\n    async function fetchForSuggestedAddresses() {\n      if (address && address.length > 4) {\n        const response = await getSuggestions(address, props.user)\n        if (response === false) {\n          props.setAlerts([\n            ...props.alerts,\n            {\n              title:\n                'getSuggestions failed. Please change the input and try again',\n              variant: 'danger'\n            }\n          ])\n        }\n        console.log('retrieved addresses', response.response)\n        const responseArr = response.response\n        setSuggestions([...responseArr])\n      }\n    }\n    fetchForSuggestedAddresses()\n  }, [address])\n\n  //localStorage.getItem('token', data)\n  return (\n    <div className=\"col-md-6 m-auto py-3\">\n      <form className=\"auth-form\" onSubmit={() => console.log('heyo')}>\n        <h3>Add new order</h3>\n        <label htmlFor=\"number\">Phone Number</label>\n        <input\n          required\n          name=\"phoneNumber\"\n          value={phoneNumber}\n          type=\"tel\"\n          placeholder=\"6172827141\"\n          maxLength={10}\n          pattern=\"[0-9]\"\n          onChange={e => setPhoneNumber(e.target.value)}\n        />\n        <label htmlFor=\"text\">Address</label>\n\n        <input\n          required\n          name=\"Address\"\n          value={address}\n          type=\"text\"\n          placeholder=\"566 Columbia Rd\"\n          onChange={e => setAddress(e.target.value)}\n        />\n        <label htmlFor=\"text\">Name</label>\n\n        <input\n          name=\"name\"\n          value={name}\n          type=\"text\"\n          placeholder=\"Big Papa\"\n          onChange={e => setName(e.target.value)}\n        />\n        <label htmlFor=\"number\">Order Total</label>\n\n        <input\n          name=\"orderTotal\"\n          value={orderTotal}\n          type=\"number\"\n          placeholder=\"Optional\"\n          onChange={e => setOrderTotal(e.target.value)}\n        />\n        <label htmlFor=\"email\">Date</label>\n\n        <input\n          name=\"date\"\n          value={date}\n          type=\"date\"\n          placeholder=\"Optional\"\n          onChange={e => setDate(e.target.value)}\n        />\n\n        {suggestions &&\n          suggestions.length > 0 &&\n          suggestions.map((suggestion: Suggestion, key: number) => (\n            <Button\n              variant=\"primary\"\n              key={key}\n              type=\"button\"\n              onClick={() => {\n                saveTheAddress(\n                  phoneNumber,\n                  suggestion.description,\n                  name,\n                  props.user\n                )\n                cleanFields()\n              }}\n            >\n              {suggestion.description}\n            </Button>\n          ))}\n      </form>\n    </div>\n  )\n}\nexport default NewOrder\n","import React from 'react'\n// import logo from './logo.svg'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport SignUp from './auth/components/SignUp'\nimport { createBrowserHistory } from 'history'\nimport SignIn from './auth/components/SignIn'\nimport Header from './shared/Header'\nimport AuthenticatedRoute from './shared/AuthenticatedRoute'\nimport AutoDismissAlert from './shared/autoDismissAlert'\nimport { AlertProps } from 'react-bootstrap/Alert'\nimport NewOrder from './neworder/components/NewOrder'\nconst { useState } = React\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState()\n  const [alerts, setAlerts] = useState([])\n\n  return (\n    <div className=\"App\">\n      <main className=\"container\">\n        <Router>\n          <Header user={user}></Header>\n          {alerts.length > 0 &&\n            alerts.map((alert: AlertProps, index) => (\n              <AutoDismissAlert\n                key={index}\n                dismissible\n                onClose={() => setAlerts([])}\n                alert={alert}\n              >\n                <p>{alert.title}</p>\n              </AutoDismissAlert>\n            ))}\n          <Switch>\n            <AuthenticatedRoute\n              user={user}\n              exact\n              path=\"/\"\n              render={() => (\n                <div>\n                  <h1>Under Construction</h1>\n                </div>\n              )}\n            />\n            <AuthenticatedRoute\n              user={user}\n              exact\n              path=\"/new-order\"\n              render={() => (\n                <NewOrder\n                  alerts={alerts}\n                  setAlerts={setAlerts}\n                  user={user}\n                ></NewOrder>\n              )}\n            />\n            <AuthenticatedRoute\n              user={user}\n              exact\n              path=\"/change-password\"\n              render={() => (\n                <div>\n                  <h1>Under Construction</h1>\n                </div>\n              )}\n            />\n            <Route\n              path=\"/sign-up\"\n              render={() => (\n                <SignUp\n                  alerts={alerts}\n                  setAlerts={setAlerts}\n                  setUser={setUser}\n                />\n              )}\n            />\n            {!user ? (\n              <Route\n                path=\"/sign-in\"\n                render={() => (\n                  <SignIn\n                    alerts={alerts}\n                    setAlerts={setAlerts}\n                    setUser={setUser}\n                  />\n                )}\n              />\n            ) : null}\n          </Switch>\n        </Router>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Describing the shape of the system's slice of state\nexport interface SystemState {\n  loggedIn: boolean\n  session: string\n  userName: string\n}\n\n// Describing the different ACTION NAMES available\nexport const UPDATE_SESSION = 'UPDATE_SESSION'\n\ninterface UpdateSessionAction {\n  type: typeof UPDATE_SESSION\n  payload: SystemState\n}\n\nexport type SystemActionTypes = UpdateSessionAction\n","import { UPDATE_SESSION, SystemState, SystemActionTypes } from './types'\n\nconst initialState: SystemState = {\n  loggedIn: false,\n  session: '',\n  userName: ''\n}\n\nexport function systemReducer(\n  state = initialState,\n  action: SystemActionTypes\n): SystemState {\n  switch (action.type) {\n    case UPDATE_SESSION: {\n      return {\n        ...state,\n        ...action.payload\n      }\n    }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { systemReducer } from './redux/system/reducers'\nimport { createStore } from 'redux'\n\nconst store = createStore(systemReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}